schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type ModelPollConnection {
  items: [Poll]!
  nextToken: String
}

type Mutation {
  createPoll(condition: ModelPollConditionInput, input: CreatePollInput!): Poll
  deletePoll(condition: ModelPollConditionInput, input: DeletePollInput!): Poll
  updatePoll(condition: ModelPollConditionInput, input: UpdatePollInput!): Poll
}

type Poll {
  createdAt: AWSDateTime!
  id: ID!
  title: String!
  updatedAt: AWSDateTime!
}

type Query {
  getPoll(id: ID!): Poll
  listPolls(filter: ModelPollFilterInput, limit: Int, nextToken: String): ModelPollConnection
}

type Subscription {
  onCreatePoll(filter: ModelSubscriptionPollFilterInput): Poll @aws_subscribe(mutations : ["createPoll"])
  onDeletePoll(filter: ModelSubscriptionPollFilterInput): Poll @aws_subscribe(mutations : ["deletePoll"])
  onUpdatePoll(filter: ModelSubscriptionPollFilterInput): Poll @aws_subscribe(mutations : ["updatePoll"])
}

enum ModelAttributeTypes {
  _null
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
}

enum ModelSortDirection {
  ASC
  DESC
}

input CreatePollInput {
  id: ID
  title: String!
}

input DeletePollInput {
  id: ID!
}

input ModelBooleanInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  eq: Boolean
  ne: Boolean
}

input ModelFloatInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Float]
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
}

input ModelIDInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
  size: ModelSizeInput
}

input ModelIntInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelPollConditionInput {
  and: [ModelPollConditionInput]
  createdAt: ModelStringInput
  not: ModelPollConditionInput
  or: [ModelPollConditionInput]
  title: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelPollFilterInput {
  and: [ModelPollFilterInput]
  createdAt: ModelStringInput
  id: ModelIDInput
  not: ModelPollFilterInput
  or: [ModelPollFilterInput]
  title: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelSizeInput {
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelStringInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
  size: ModelSizeInput
}

input ModelSubscriptionBooleanInput {
  eq: Boolean
  ne: Boolean
}

input ModelSubscriptionFloatInput {
  between: [Float]
  eq: Float
  ge: Float
  gt: Float
  in: [Float]
  le: Float
  lt: Float
  ne: Float
  notIn: [Float]
}

input ModelSubscriptionIDInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  in: [ID]
  le: ID
  lt: ID
  ne: ID
  notContains: ID
  notIn: [ID]
}

input ModelSubscriptionIntInput {
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  in: [Int]
  le: Int
  lt: Int
  ne: Int
  notIn: [Int]
}

input ModelSubscriptionPollFilterInput {
  and: [ModelSubscriptionPollFilterInput]
  createdAt: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  or: [ModelSubscriptionPollFilterInput]
  title: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
}

input ModelSubscriptionStringInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  in: [String]
  le: String
  lt: String
  ne: String
  notContains: String
  notIn: [String]
}

input UpdatePollInput {
  id: ID!
  title: String
}
