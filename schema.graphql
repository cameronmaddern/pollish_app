schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type ModelPollConnection @aws_api_key {
  items: [Poll]!
  nextToken: String
}

type ModelTextOptionConnection @aws_api_key {
  items: [TextOption]!
  nextToken: String
}

type ModelTextPollConnection @aws_api_key {
  items: [TextPoll]!
  nextToken: String
}

type ModelVoteConnection @aws_api_key {
  items: [Vote]!
  nextToken: String
}

type Mutation {
  createPoll(condition: ModelPollConditionInput, input: CreatePollInput!): Poll
  createTextOption(
    condition: ModelTextOptionConditionInput
    input: CreateTextOptionInput!
  ): TextOption @aws_api_key
  createTextPoll(
    condition: ModelTextPollConditionInput
    input: CreateTextPollInput!
  ): TextPoll @aws_api_key
  createVote(condition: ModelVoteConditionInput, input: CreateVoteInput!): Vote
    @aws_api_key
  deletePoll(condition: ModelPollConditionInput, input: DeletePollInput!): Poll
  deleteTextOption(
    condition: ModelTextOptionConditionInput
    input: DeleteTextOptionInput!
  ): TextOption
  deleteTextPoll(
    condition: ModelTextPollConditionInput
    input: DeleteTextPollInput!
  ): TextPoll
  deleteVote(condition: ModelVoteConditionInput, input: DeleteVoteInput!): Vote
  updatePoll(condition: ModelPollConditionInput, input: UpdatePollInput!): Poll
  updateTextOption(
    condition: ModelTextOptionConditionInput
    input: UpdateTextOptionInput!
  ): TextOption @aws_api_key
  updateTextPoll(
    condition: ModelTextPollConditionInput
    input: UpdateTextPollInput!
  ): TextPoll @aws_api_key
  updateVote(condition: ModelVoteConditionInput, input: UpdateVoteInput!): Vote
    @aws_api_key
}

type Poll @aws_api_key {
  createdAt: AWSDateTime!
  id: ID!
  title: String!
  updatedAt: AWSDateTime!
}

type Query {
  getPoll(id: ID!): Poll @aws_api_key
  getTextOption(id: ID!): TextOption @aws_api_key
  getTextPoll(id: ID!): TextPoll @aws_api_key
  getVote(id: ID!): Vote @aws_api_key
  listPolls(
    filter: ModelPollFilterInput
    limit: Int
    nextToken: String
  ): ModelPollConnection @aws_api_key
  listTextOptions(
    filter: ModelTextOptionFilterInput
    limit: Int
    nextToken: String
  ): ModelTextOptionConnection @aws_api_key
  listTextPolls(
    filter: ModelTextPollFilterInput
    limit: Int
    nextToken: String
  ): ModelTextPollConnection @aws_api_key
  listVotes(
    filter: ModelVoteFilterInput
    limit: Int
    nextToken: String
  ): ModelVoteConnection @aws_api_key
}

type Subscription {
  onCreatePoll(filter: ModelSubscriptionPollFilterInput): Poll
    @aws_api_key
    @aws_subscribe(mutations: ["createPoll"])
  onCreateTextOption(
    filter: ModelSubscriptionTextOptionFilterInput
  ): TextOption @aws_api_key @aws_subscribe(mutations: ["createTextOption"])
  onCreateTextPoll(filter: ModelSubscriptionTextPollFilterInput): TextPoll
    @aws_api_key
    @aws_subscribe(mutations: ["createTextPoll"])
  onCreateVote(filter: ModelSubscriptionVoteFilterInput): Vote
    @aws_api_key
    @aws_subscribe(mutations: ["createVote"])
  onDeletePoll(filter: ModelSubscriptionPollFilterInput): Poll
    @aws_api_key
    @aws_subscribe(mutations: ["deletePoll"])
  onDeleteTextOption(
    filter: ModelSubscriptionTextOptionFilterInput
  ): TextOption @aws_api_key @aws_subscribe(mutations: ["deleteTextOption"])
  onDeleteTextPoll(filter: ModelSubscriptionTextPollFilterInput): TextPoll
    @aws_api_key
    @aws_subscribe(mutations: ["deleteTextPoll"])
  onDeleteVote(filter: ModelSubscriptionVoteFilterInput): Vote
    @aws_api_key
    @aws_subscribe(mutations: ["deleteVote"])
  onUpdatePoll(filter: ModelSubscriptionPollFilterInput): Poll
    @aws_api_key
    @aws_subscribe(mutations: ["updatePoll"])
  onUpdateTextOption(
    filter: ModelSubscriptionTextOptionFilterInput
  ): TextOption @aws_api_key @aws_subscribe(mutations: ["updateTextOption"])
  onUpdateTextPoll(filter: ModelSubscriptionTextPollFilterInput): TextPoll
    @aws_api_key
    @aws_subscribe(mutations: ["updateTextPoll"])
  onUpdateVote(filter: ModelSubscriptionVoteFilterInput): Vote
    @aws_api_key
    @aws_subscribe(mutations: ["updateVote"])
}

type TextOption @aws_api_key {
  createdAt: AWSDateTime!
  id: ID!
  poll: String!
  text: String!
  updatedAt: AWSDateTime!
}

type TextPoll @aws_api_key {
  createdAt: AWSDateTime!
  id: ID!
  image: String!
  title: String!
  updatedAt: AWSDateTime!
}

type Vote @aws_api_key {
  createdAt: AWSDateTime!
  id: ID!
  option: String!
  owner: String!
  poll: String!
  updatedAt: AWSDateTime!
}

enum ModelAttributeTypes {
  _null
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
}

enum ModelSortDirection {
  ASC
  DESC
}

input CreatePollInput {
  id: ID
  title: String!
}

input CreateTextOptionInput {
  id: ID
  poll: String!
  text: String!
}

input CreateTextPollInput {
  id: ID
  image: String!
  title: String!
}

input CreateVoteInput {
  id: ID
  option: String!
  owner: String!
  poll: String!
}

input DeletePollInput {
  id: ID!
}

input DeleteTextOptionInput {
  id: ID!
}

input DeleteTextPollInput {
  id: ID!
}

input DeleteVoteInput {
  id: ID!
}

input ModelBooleanInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  eq: Boolean
  ne: Boolean
}

input ModelFloatInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Float]
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
}

input ModelIDInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
  size: ModelSizeInput
}

input ModelIntInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelPollConditionInput {
  and: [ModelPollConditionInput]
  createdAt: ModelStringInput
  not: ModelPollConditionInput
  or: [ModelPollConditionInput]
  title: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelPollFilterInput {
  and: [ModelPollFilterInput]
  createdAt: ModelStringInput
  id: ModelIDInput
  not: ModelPollFilterInput
  or: [ModelPollFilterInput]
  title: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelSizeInput {
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelStringInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
  size: ModelSizeInput
}

input ModelSubscriptionBooleanInput {
  eq: Boolean
  ne: Boolean
}

input ModelSubscriptionFloatInput {
  between: [Float]
  eq: Float
  ge: Float
  gt: Float
  in: [Float]
  le: Float
  lt: Float
  ne: Float
  notIn: [Float]
}

input ModelSubscriptionIDInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  in: [ID]
  le: ID
  lt: ID
  ne: ID
  notContains: ID
  notIn: [ID]
}

input ModelSubscriptionIntInput {
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  in: [Int]
  le: Int
  lt: Int
  ne: Int
  notIn: [Int]
}

input ModelSubscriptionPollFilterInput {
  and: [ModelSubscriptionPollFilterInput]
  createdAt: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  or: [ModelSubscriptionPollFilterInput]
  title: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
}

input ModelSubscriptionStringInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  in: [String]
  le: String
  lt: String
  ne: String
  notContains: String
  notIn: [String]
}

input ModelSubscriptionTextOptionFilterInput {
  and: [ModelSubscriptionTextOptionFilterInput]
  createdAt: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  or: [ModelSubscriptionTextOptionFilterInput]
  poll: ModelSubscriptionStringInput
  text: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
}

input ModelSubscriptionTextPollFilterInput {
  and: [ModelSubscriptionTextPollFilterInput]
  createdAt: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  image: ModelSubscriptionStringInput
  or: [ModelSubscriptionTextPollFilterInput]
  title: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
}

input ModelSubscriptionVoteFilterInput {
  and: [ModelSubscriptionVoteFilterInput]
  createdAt: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  option: ModelSubscriptionStringInput
  or: [ModelSubscriptionVoteFilterInput]
  owner: ModelSubscriptionStringInput
  poll: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
}

input ModelTextOptionConditionInput {
  and: [ModelTextOptionConditionInput]
  createdAt: ModelStringInput
  not: ModelTextOptionConditionInput
  or: [ModelTextOptionConditionInput]
  poll: ModelStringInput
  text: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelTextOptionFilterInput {
  and: [ModelTextOptionFilterInput]
  createdAt: ModelStringInput
  id: ModelIDInput
  not: ModelTextOptionFilterInput
  or: [ModelTextOptionFilterInput]
  poll: ModelStringInput
  text: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelTextPollConditionInput {
  and: [ModelTextPollConditionInput]
  createdAt: ModelStringInput
  image: ModelStringInput
  not: ModelTextPollConditionInput
  or: [ModelTextPollConditionInput]
  title: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelTextPollFilterInput {
  and: [ModelTextPollFilterInput]
  createdAt: ModelStringInput
  id: ModelIDInput
  image: ModelStringInput
  not: ModelTextPollFilterInput
  or: [ModelTextPollFilterInput]
  title: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelVoteConditionInput {
  and: [ModelVoteConditionInput]
  createdAt: ModelStringInput
  not: ModelVoteConditionInput
  option: ModelStringInput
  or: [ModelVoteConditionInput]
  owner: ModelStringInput
  poll: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelVoteFilterInput {
  and: [ModelVoteFilterInput]
  createdAt: ModelStringInput
  id: ModelIDInput
  not: ModelVoteFilterInput
  option: ModelStringInput
  or: [ModelVoteFilterInput]
  owner: ModelStringInput
  poll: ModelStringInput
  updatedAt: ModelStringInput
}

input UpdatePollInput {
  id: ID!
  title: String
}

input UpdateTextOptionInput {
  id: ID!
  poll: String
  text: String
}

input UpdateTextPollInput {
  id: ID!
  image: String
  title: String
}

input UpdateVoteInput {
  id: ID!
  option: String
  owner: String
  poll: String
}
